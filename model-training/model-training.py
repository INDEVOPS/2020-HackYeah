# -*- coding: utf-8 -*-
"""hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sp5yAWe50gLkRRw3X4T--ozaY8MLB4Lc

# License
 Copyright 2020 Maciej Ma≈õlanka
 
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 
 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****
"""

from __future__ import absolute_import, division, print_function, unicode_literals

try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
!pip install tensorflow-datasets
import tensorflow_datasets as tfds

from tensorflow import keras
import numpy as np
import os
!pip install pandas
import pandas as pd
print(tf.__version__)

TRAIN_DATA_URL = "http://hackaton.lukask.pro//export/questions"
train_file_path = tf.keras.utils.get_file("questions.csv", TRAIN_DATA_URL)
df = pd.read_csv(train_file_path, header=None)

df.head()

def encode(text_tensor):
  encoded_text = encoder.encode(text_tensor.numpy())
  return encoded_text

vocabulary_set = set()

for i, row in df.iterrows():
    tokens = tf.keras.preprocessing.text.text_to_word_sequence(df.at[i,0])
    vocabulary_set.update(tokens)

vocab_size = len(vocabulary_set)
encoder = tfds.features.text.TokenTextEncoder(vocabulary_set)

questions = []
answers = []

for i, row in df.iterrows():
    question = encoder.encode(df.at[i,0])
    wordNumber = len(question)
    if wordNumber < 10:
        index = wordNumber
        while index < 10:
          question.append(0)
          index += 1
    ta = tf.cast(question, tf.int64)
    ta.set_shape([None])
    questions.append(ta)
    
    tn = tf.cast(df.at[i,1], tf.int64)
    tn.set_shape([])
    answers.append(tn)
    
print(vocabulary_set)

train_data = tf.data.Dataset.from_tensor_slices(([questions],[answers]))

sample_text, sample_label= next(iter(train_data))
print(type(sample_label))
print(type(sample_text))
sample_text[0], sample_label[0]

vocab_size += 1
print(vocab_size)

model = tf.keras.Sequential()

model.add(tf.keras.layers.Embedding(64,vocab_size))

model.add(tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)))

# One or more dense layers.
# Edit the list in the `for` line to experiment with layer sizes.
for units in [64, 64]:
  model.add(tf.keras.layers.Dense(units, activation='relu'))

# Output layer. The first argument is the number of labels.
model.add(tf.keras.layers.Dense(2))

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(train_data, epochs=3)

model.summary()

model.save_weights('tmp/checkpoints/my_checkpoint')

sample_text, sample_label= next(iter(train_data))
model2 = tf.keras.Sequential()
model2.add(tf.keras.layers.Embedding(64,vocab_size))
model2.add(tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)))
for units in [64, 64]:
  model2.add(tf.keras.layers.Dense(units, activation='relu'))

# Output layer. The first argument is the number of labels.
model2.add(tf.keras.layers.Dense(2))
model2.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model2.load_weights('tmp/checkpoints/my_checkpoint')
loss,acc = model2.evaluate(sample_text,  sample_label, verbose=2)
print("Restored model, accuracy: {:5.2f}%".format(100*acc))

#!mkdir -p saved_model
model.save('tmp/saved_model/my_model')